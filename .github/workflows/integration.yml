---
name: Integration
on:
  push:
    branches:
      - '**'
    tags:
      - 'v*'

jobs:
  build_ui:
    name: Build UI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      - uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Test
        run: npm test -- --coverage
      - name: Build
        run: npm run build
      - name: Store artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ui-dist
          path: |
            dist
            packages/pypi/djangomni_search/static

  build_pypi:
    name: Build PyPi package
    runs-on: ubuntu-latest
    needs:
      - build_ui
    env:
      dir_backend: ./packages/pypi
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - uses: abatilo/actions-poetry@v2
        with:
          poetry-version: 1.3.1
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pypoetry
          key: ${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        working-directory: ${{env.dir_backend}}
        run: poetry install
      - name: Check coding style
        working-directory: ${{env.dir_backend}}
        run: poetry run flake8
      - uses: actions/download-artifact@v3
        with:
          name: ui-dist
      - name: Build
        working-directory: ${{env.dir_backend}}
        run: poetry build -f sdist
      - name: Store artifacts
        uses: actions/upload-artifact@v3
        with:
          name: pypi-dist
          path: packages/pypi/dist/

  setenv:
    name: Set the environment
    runs-on: ubuntu-latest
    outputs:
      env_name: ${{ steps.branch_check.outputs.env_name }}
    steps:
      - name: Determine destination environment
        id: branch_check
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "env_name=release" >> $GITHUB_OUTPUT
          fi

  publish_pypi:
    name: Publish PyPi package
    runs-on: ubuntu-latest
    needs:
      - build_pypi
      - setenv
    env:
      dir_backend: ./packages/pypi
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install dependencies
        working-directory: ${{env.dir_backend}}
        run: pip install twine
      - name: Configure twine
        run: echo -e "[pypi]\nusername = __token__\npassword = ${{secrets.PYPI_TOKEN}}" > ~/.pypirc
      - uses: actions/download-artifact@v3
        with:
          name: pypi-dist
          path: packages/pypi/dist
      - name: Check packages
        working-directory: ${{env.dir_backend}}
        run: twine check dist/*
      - name: Publish packages
        working-directory: ${{env.dir_backend}}
        run: twine upload dist/*
